# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import EmptyMessage_pb2 as EmptyMessage__pb2
import LIDRequestMessage_pb2 as LIDRequestMessage__pb2
import LIDResponseMessage_pb2 as LIDResponseMessage__pb2
import SupportedLanguagesMessage_pb2 as SupportedLanguagesMessage__pb2


class LanguageIdStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SupportedLanguages = channel.unary_unary(
        '/skyman.languageId.rpc.v1.LanguageId/SupportedLanguages',
        request_serializer=EmptyMessage__pb2.EmptyMessage.SerializeToString,
        response_deserializer=SupportedLanguagesMessage__pb2.SupportedLanguagesMessage.FromString,
        )
    self.Identify = channel.stream_stream(
        '/skyman.languageId.rpc.v1.LanguageId/Identify',
        request_serializer=LIDRequestMessage__pb2.LIDRequestMessage.SerializeToString,
        response_deserializer=LIDResponseMessage__pb2.LIDResponseMessage.FromString,
        )


class LanguageIdServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SupportedLanguages(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Identify(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LanguageIdServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SupportedLanguages': grpc.unary_unary_rpc_method_handler(
          servicer.SupportedLanguages,
          request_deserializer=EmptyMessage__pb2.EmptyMessage.FromString,
          response_serializer=SupportedLanguagesMessage__pb2.SupportedLanguagesMessage.SerializeToString,
      ),
      'Identify': grpc.stream_stream_rpc_method_handler(
          servicer.Identify,
          request_deserializer=LIDRequestMessage__pb2.LIDRequestMessage.FromString,
          response_serializer=LIDResponseMessage__pb2.LIDResponseMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skyman.languageId.rpc.v1.LanguageId', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
